# Generated by Django 5.2.6 on 2025-09-13 03:52

import django.db.models.deletion
import django_ckeditor_5.fields
import uuid
from django.conf import settings
from django.db import migrations, models
from django.db.migrations.operations.special import SeparateDatabaseAndState


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name='CourseCategory',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('name', models.CharField(choices=[('beginner', 'Beginner Courses'), ('intermediate', 'Intermediate Courses'), ('advanced', 'Advanced Programs'), ('masterclass', 'Masterclasses & Short Workshops')], max_length=50, unique=True)),
                        ('display_name', models.CharField(max_length=100)),
                        ('description', models.TextField()),
                        ('icon', models.CharField(help_text='Font Awesome icon class', max_length=50)),
                        ('order', models.PositiveIntegerField(default=0)),
                    ],
                    options={
                        'verbose_name_plural': 'Course Categories',
                        'db_table': 'core_coursecategory',
                        'ordering': ['order', 'name'],
                    },
                ),
                migrations.CreateModel(
                    name='Course',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('title', models.CharField(max_length=200)),
                        ('slug', models.SlugField(blank=True, unique=True)),
                        ('overview', django_ckeditor_5.fields.CKEditor5Field(help_text='Brief course overview')),
                        ('description', django_ckeditor_5.fields.CKEditor5Field(help_text='Detailed course description')),
                        ('duration', models.CharField(help_text='e.g., 8 weeks, 3 months', max_length=100)),
                        ('schedule', models.CharField(help_text='e.g., online, evenings', max_length=100)),
                        ('learning_outcomes', django_ckeditor_5.fields.CKEditor5Field(help_text='What students will learn')),
                        ('tools_software', models.TextField(help_text='Python, Power BI, R, etc.')),
                        ('prerequisites', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Course prerequisites')),
                        ('course_syllabus', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed course syllabus')),
                        ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                        ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                        ('course_pdf', models.FileField(blank=True, null=True, upload_to='course_pdfs/')),
                        ('image', models.ImageField(blank=True, null=True, upload_to='course_images/')),
                        ('video_intro_url', models.URLField(blank=True, help_text='YouTube or Vimeo URL for course intro')),
                        ('is_featured', models.BooleanField(default=False)),
                        ('is_active', models.BooleanField(default=True)),
                        ('total_modules', models.PositiveIntegerField(default=0, help_text='Total number of modules')),
                        ('estimated_hours', models.PositiveIntegerField(default=0, help_text='Estimated completion time in hours')),
                        ('created_at', models.DateTimeField(auto_now_add=True)),
                        ('updated_at', models.DateTimeField(auto_now=True)),
                        ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='courses.coursecategory')),
                    ],
                    options={
                        'db_table': 'core_course',
                        'ordering': ['-created_at'],
                    },
                ),
                migrations.CreateModel(
                    name='CourseModule',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('title', models.CharField(max_length=200)),
                        ('description', django_ckeditor_5.fields.CKEditor5Field(help_text='Module overview')),
                        ('content', django_ckeditor_5.fields.CKEditor5Field(help_text='Detailed module content')),
                        ('order', models.PositiveIntegerField(default=0)),
                        ('duration_hours', models.PositiveIntegerField(default=0, help_text='Estimated hours to complete')),
                        ('video_url', models.URLField(blank=True, help_text='YouTube or Vimeo URL for module video')),
                        ('learning_objectives', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='What students will learn in this module')),
                        ('resources', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Additional resources and reading materials')),
                        ('is_active', models.BooleanField(default=True)),
                        ('created_at', models.DateTimeField(auto_now_add=True)),
                        ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='courses.course')),
                    ],
                    options={
                        'db_table': 'core_coursemodule',
                        'ordering': ['order', 'id'],
                        'unique_together': {('course', 'order')},
                    },
                ),
                migrations.CreateModel(
                    name='CodeExample',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('title', models.CharField(max_length=200)),
                        ('description', django_ckeditor_5.fields.CKEditor5Field(help_text='Explanation of the code example')),
                        ('code', models.TextField(help_text='The actual code')),
                        ('language', models.CharField(default='python', help_text='Programming language (python, r, sql, etc.)', max_length=50)),
                        ('explanation', django_ckeditor_5.fields.CKEditor5Field(help_text='Detailed explanation of the code')),
                        ('expected_output', models.TextField(blank=True, help_text='Expected output when code is run')),
                        ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                        ('order', models.PositiveIntegerField(default=0)),
                        ('is_interactive', models.BooleanField(default=False, help_text='Can students run this code?')),
                        ('created_at', models.DateTimeField(auto_now_add=True)),
                        ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='code_examples', to='courses.coursemodule')),
                    ],
                    options={
                        'db_table': 'core_codeexample',
                        'ordering': ['order', 'id'],
                    },
                ),
                migrations.CreateModel(
                    name='Enrollment',
                    fields=[
                        ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                        ('payment_method', models.CharField(choices=[('mpesa', 'M-Pesa'), ('paypal', 'PayPal'), ('bank', 'Bank Transfer'), ('other', 'Other')], max_length=20)),
                        ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                        ('currency', models.CharField(default='KES', max_length=3)),
                        ('installments', models.PositiveIntegerField(choices=[(1, 'Full Payment'), (2, '2 Installments'), (3, '3 Installments')], default=1)),
                        ('amount_paid', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                        ('payment_status', models.CharField(choices=[('pending', 'Payment Pending'), ('partial', 'Partial Payment'), ('completed', 'Payment Completed'), ('verified', 'Payment Verified')], default='pending', max_length=20)),
                        ('enrollment_status', models.CharField(choices=[('inactive', 'Inactive'), ('active', 'Active'), ('completed', 'Completed'), ('suspended', 'Suspended')], default='inactive', max_length=20)),
                        ('activation_code', models.CharField(blank=True, max_length=19, unique=True)),
                        ('is_activated', models.BooleanField(default=False)),
                        ('activated_at', models.DateTimeField(blank=True, null=True)),
                        ('created_at', models.DateTimeField(auto_now_add=True)),
                        ('updated_at', models.DateTimeField(auto_now=True)),
                        ('expires_at', models.DateTimeField(blank=True, null=True)),
                        ('admin_notes', models.TextField(blank=True, help_text='Internal notes for administrators')),
                        ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.course')),
                        ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
                    ],
                    options={
                        'db_table': 'core_enrollment',
                        'ordering': ['-created_at'],
                        'unique_together': {('user', 'course')},
                    },
                ),
                migrations.CreateModel(
                    name='Exercise',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('title', models.CharField(max_length=200)),
                        ('description', django_ckeditor_5.fields.CKEditor5Field(help_text='Exercise instructions and requirements')),
                        ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                        ('estimated_time_minutes', models.PositiveIntegerField(default=30, help_text='Estimated completion time in minutes')),
                        ('hints', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Helpful hints for students')),
                        ('solution', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Sample solution (optional)')),
                        ('dataset_url', models.URLField(blank=True, help_text='URL to download exercise dataset')),
                        ('order', models.PositiveIntegerField(default=0)),
                        ('is_graded', models.BooleanField(default=False)),
                        ('points', models.PositiveIntegerField(default=0, help_text='Points awarded for completion')),
                        ('created_at', models.DateTimeField(auto_now_add=True)),
                        ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='courses.coursemodule')),
                    ],
                    options={
                        'db_table': 'core_exercise',
                        'ordering': ['order', 'id'],
                    },
                ),
                migrations.CreateModel(
                    name='CapstoneProject',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('title', models.CharField(max_length=200)),
                        ('description', django_ckeditor_5.fields.CKEditor5Field(help_text='Detailed project requirements and objectives')),
                        ('requirements', django_ckeditor_5.fields.CKEditor5Field(help_text='Technical requirements and deliverables')),
                        ('evaluation_criteria', django_ckeditor_5.fields.CKEditor5Field(help_text='How the project will be evaluated')),
                        ('estimated_hours', models.PositiveIntegerField(default=40, help_text='Estimated completion time in hours')),
                        ('difficulty_level', models.CharField(choices=[('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='intermediate', max_length=20)),
                        ('sample_datasets', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Information about datasets to be used')),
                        ('deliverables', django_ckeditor_5.fields.CKEditor5Field(help_text='What students need to submit')),
                        ('resources', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Additional resources and references')),
                        ('order', models.PositiveIntegerField(default=0)),
                        ('is_group_project', models.BooleanField(default=False, help_text='Is this a group project?')),
                        ('max_group_size', models.PositiveIntegerField(default=1, help_text='Maximum group size if group project')),
                        ('created_at', models.DateTimeField(auto_now_add=True)),
                        ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='capstone_projects', to='courses.course')),
                    ],
                    options={
                        'db_table': 'core_capstoneproject',
                        'ordering': ['order', 'id'],
                        'unique_together': {('course', 'order')},
                    },
                ),
                migrations.CreateModel(
                    name='PaymentInstallment',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('installment_number', models.PositiveIntegerField()),
                        ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                        ('due_date', models.DateField()),
                        ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('verified', 'Verified'), ('overdue', 'Overdue')], default='pending', max_length=20)),
                        ('payment_date', models.DateTimeField(blank=True, null=True)),
                        ('payment_reference', models.CharField(blank=True, help_text='Payment reference number', max_length=100)),
                        ('payment_notes', models.TextField(blank=True, help_text='Additional payment notes')),
                        ('created_at', models.DateTimeField(auto_now_add=True)),
                        ('updated_at', models.DateTimeField(auto_now=True)),
                        ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_installments', to='courses.enrollment')),
                    ],
                    options={
                        'db_table': 'core_paymentinstallment',
                        'ordering': ['enrollment', 'installment_number'],
                        'unique_together': {('enrollment', 'installment_number')},
                    },
                ),
            ],
            database_operations=[
                # No database operations - tables already exist from core app
            ],
        ),
    ]
